datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Permissions {
  id     String @id @default(cuid())
  title  String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
}

model Role {
  id          String        @id @default(cuid())
  title       String
  permissions Permissions[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
}

model User {
  id           String         @id @default(cuid())
  name         String?
  username     String?        @unique
  email        String         @unique
  image        String?
  password     String?
  accounts     Account[]
  roles        Role[]
  template     Template[]
  testimonials Testimonials[]
  Transactions Transaction[]
  Website      Website[]
  Coupon       Coupon[]
  MediaBucket  MediaBucket[]

  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Transaction {
  id                  String                @id @default(cuid())
  customerId          String
  customer            User                  @relation(fields: [customerId], references: [id])
  amount              Int
  couponId            String?
  coupon              Coupon?               @relation(fields: [couponId], references: [id])
  TemplateTransaction TemplateTransaction[]
  PaymentHistory      PaymentHistory[]
  Testimonials        Testimonials?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  ON_REFUNDING
  REFUNDED
}

model PaymentHistory {
  id            String        @id @default(cuid())
  transactionId String
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  paidAt        DateTime?
  status        PaymentStatus

  expiredAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Coupon {
  id          String        @id @default(cuid())
  code        String
  discount    Int
  userId      String?
  user        User?         @relation(fields: [userId], references: [id])
  timeUsed    Int
  Transaction Transaction[]

  expiredAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Website {
  id String @id @default(cuid())

  websiteName  String
  ownerId      String
  owner        User     @relation(fields: [ownerId], references: [id])
  RSVP         RSVP[]
  customDomain String?
  content      String   @db.Text
  isPublic     Boolean
  templateId   String
  template     Template @relation(fields: [templateId], references: [id])

  expiredAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum RSVPStatus {
  ATTEND
  NOT_ATTEND
  UNCERTAIN
}

model RSVP {
  id        String     @id @default(cuid())
  websiteId String
  website   Website    @relation(fields: [websiteId], references: [id])
  name      String
  status    RSVPStatus
  message   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model MediaBucket {
  id       String    @id @default(cuid())
  name     String
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  timeUsed Int       @default(0)
  keepItem Boolean   @default(false)
  type     MediaType @default(IMAGE)
}

model Template {
  id                 String              @id @default(cuid())
  title              String
  price              Int                 @default(100000)
  description        String
  features           String
  content            String              @db.Text
  status             TemplateStatus      @default(DRAFT)
  purchasedTime      Int                 @default(0)
  averageRating      Int                 @default(0)
  additionalFeatures AdditionalFeature[]
  Website            Website[]

  templateCategoryId String
  templateCategory   TemplateCategory @relation(fields: [templateCategoryId], references: [id])

  testimonials        Testimonials[]
  createdBy           String
  createdByUser       User                  @relation(fields: [createdBy], references: [id])
  TemplateTransaction TemplateTransaction[]

  templateMediaBucket TemplateMediaBucket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TemplateTransaction {
  id            String      @id @default(cuid())
  templateId    String
  template      Template    @relation(fields: [templateId], references: [id])
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model AdditionalFeature {
  id       String     @id @default(cuid())
  name     String
  Template Template[]
}

enum TemplateStatus {
  DRAFT
  ON_SALE
  NOT_AVAILABLE
}

model TemplateCategory {
  id       String     @id @default(cuid())
  title    String     @unique
  Template Template[]
}

model TemplateMediaBucket {
  id         String    @id @default(cuid())
  name       String
  type       MediaType
  timeUsed   Int       @default(0)
  keepItem   Boolean   @default(false)
  templateId String
  template   Template  @relation(fields: [templateId], references: [id])
}

model Testimonials {
  id      String @id @default(cuid())
  name    String
  rating  Int
  message String

  templateId String
  template   Template @relation(fields: [templateId], references: [id])

  userId        String
  user          User         @relation(fields: [userId], references: [id])
  transactionId String?      @unique
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
}
